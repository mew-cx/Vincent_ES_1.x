#line 2 "Gen_glslang.cpp"

#line 4 "Gen_glslang.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[477] =
    {   0,
        0,    0,    0,    0,  157,  155,  154,  154,  139,  145,
      150,  134,  135,  143,  142,  131,  140,  138,  144,  102,
      102,  132,  128,  146,  133,  147,  151,   98,  136,  137,
      149,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,  129,  148,  130,  141,  153,  156,  155,  152,  125,
      111,  130,    0,  119,  114,  109,  117,  107,  118,  108,
      105,  106,    0,  110,  104,  100,  101,    0,    0,  102,
      137,  129,  136,  126,  122,  124,  123,  127,   98,  115,
      121,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,    8,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   11,   13,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  116,  120,  152,    0,    0,    0,
        1,  104,    0,    0,  103,   99,  112,  113,   52,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,    9,   98,   98,
       98,   98,   98,   98,   98,   98,   22,   98,   98,   98,
       98,   98,   98,   98,   98,   14,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,    0,
        0,  105,    0,  104,   98,   24,   98,   98,   95,   98,
       98,   98,   98,   98,   98,   98,   12,   55,   98,   98,
       98,   71,   98,   98,   60,   75,   98,   98,   98,   98,
       98,   98,   98,   98,   72,   16,   29,   30,   31,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   58,   25,   98,   98,   98,
       98,   98,   98,   32,   33,   34,   23,   98,   98,    0,
       98,    6,   38,   39,   40,   53,    3,   98,   98,   98,

       98,   87,   88,   89,   98,   26,   76,   21,   84,   85,
       86,   18,   81,   82,   83,   98,   15,   79,   98,   98,
       35,   36,   37,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   73,   98,   98,   98,   98,   98,   98,   98,
       98,   54,   98,   97,   98,   98,   10,    0,   98,   98,
       98,   98,   74,   68,   63,   98,   98,   98,   98,   98,
       80,   59,   98,   66,   28,   98,   94,   67,   51,   78,
       61,   98,   98,   98,   98,   98,   98,    0,   98,   98,
       62,   27,   98,   98,   98,   17,   98,   98,   98,   98,
       98,   56,    4,   98,    5,   98,    0,   98,    7,   69,

       98,   98,   98,   64,   98,   98,   98,   98,   98,   57,
       77,   65,    0,    0,    2,   70,   20,   96,   19,   90,
       42,   43,   98,   41,    0,   98,   98,   98,   98,   98,
        0,    0,    0,   98,   98,   98,   98,   44,    0,    0,
        0,   98,   98,   98,   98,    0,    0,    0,   98,   49,
       98,   93,    0,   47,    0,   98,   98,   98,    0,    0,
        0,   91,   98,   92,   45,    0,   46,   98,    0,   98,
        0,   98,    0,   50,   48,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    1,    1,    5,    6,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   28,   29,   30,   31,   28,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   33,   34,   32,   32,   32,   32,   35,   32,   32,
       36,    1,   37,   38,   32,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   32,   48,   49,   50,   51,
       52,   53,   32,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    1,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    4,    4,    4,
        3,    5,    5,    5,    5,    1,    1,    1,    4,    4,
        4,    4,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[483] =
    {   0,
        0,    0,   66,    0,  674,  675,  675,  675,  648,  108,
      129,  675,  675,  647,  126,  675,  125,  123,  139,  152,
      143,  645,  675,  153,  645,  120,  675,    0,  675,  675,
      122,  106,  127,  141,  145,  106,  152,  617,  155,  138,
      616,  166,  159,  610,  161,  623,  175,  174,  168,  186,
      619,  675,  181,  675,  675,  675,  675,  650,    0,  675,
      675,  675,  624,  675,  675,  675,  675,  675,  675,  675,
      231,  675,  659,  675,  238,  124,  229,  267,    0,  230,
      675,  675,  675,  636,  675,  675,  675,  635,    0,  675,
      675,  609,  602,  605,  613,  612,  599,  614,  601,  607,

      595,  592,  605,  592,  589,  589,  595,  583,  185,  588,
      598,  584,  590,  593,  594,    0,  240,  593,  157,  579,
      592,  583,  585,  575,  589,  586,  588,  571,  576,  573,
      562,  187,  570,  575,  571,  573,  562,  565,  189,  570,
      562,  574,  216,  567,  675,  675,    0,  563,  285,  609,
      675,  292,  309,  321,  328,    0,  675,  675,    0,  557,
      561,  570,  567,  551,  551,  184,  566,  563,  563,  561,
      558,  550,  556,  543,  554,  540,  556,    0,  553,  541,
      548,  545,  549,  542,  531,  530,  543,  546,  543,  538,
      529,  249,  534,  537,  528,  525,  529,  535,  526,  517,

      520,  518,  528,  514,  512,  525,  511,  513,  510,  521,
      520,  226,  515,  510,  499,  297,  517,  519,  508,  503,
      335,  342,  349,  356,  508,    0,  506,  314,    0,  498,
      496,  504,  493,  510,  499,  361,    0,    0,  493,  503,
      503,    0,  488,  364,    0,    0,  490,  367,  491,  485,
      484,  485,  484,  370,    0,    0,    0,    0,    0,  480,
      481,  486,  477,  490,  485,  484,  476,  480,  472,  475,
      479,  484,  470,  482,  473,    0,    0,  479,  468,  468,
      473,  472,  469,    0,    0,    0,    0,  459,  471,  464,
      472,    0,    0,    0,    0,    0,    0,  460,  461,  455,

      465,    0,    0,    0,  456,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  463,    0,    0,  461,  457,
        0,    0,    0,  453,  449,  454,  444,  457,  443,  456,
      445,  452,    0,  450,  452,  436,  451,  444,  450,  445,
      433,    0,  435,    0,  434,  437,    0,  440,  425,  424,
      424,  437,    0,  439,    0,  438,  437,  422,  435,  422,
        0,    0,  425,    0,    0,  417,    0,    0,    0,    0,
        0,  414,  425,  418,  424,  421,  416,  410,  407,  419,
        0,    0,  412,  419,  408,    0,  417,  414,  404,  374,
      412,    0,    0,  412,    0,  410,  259,  409,    0,    0,

      408,  394,  406,    0,  397,  417,  416,  415,  387,    0,
        0,    0,  413,  412,    0,    0,    0,    0,    0,  407,
      257,  407,  399,  404,  284,  391,  393,  389,  391,  390,
      386,  388,  384,  390,  387,  388,  385,    0,  386,  383,
      384,  380,  365,  360,  345,  358,  343,  356,  345,  362,
      343,    0,  342,  359,  282,  263,  274,  240,  235,  234,
      212,    0,  225,    0,  675,  194,  675,  188,  185,  155,
      124,   93,   90,    0,  675,  675,  402,  403,  406,  411,
      415,  416
    } ;

static yyconst flex_int16_t yy_def[483] =
    {   0,
      476,    1,  476,    3,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      477,  476,  476,  476,  476,  476,  476,  478,  476,  476,
      476,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  476,  476,  476,  476,  476,  476,  476,  479,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  480,  476,  476,   20,  481,  476,  482,  477,
      476,  476,  476,  476,  476,  476,  476,  476,  478,  476,
      476,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  476,  476,  479,  476,  476,  480,
      476,  476,  476,  476,  476,  482,  476,  476,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  476,
      476,  476,  476,  476,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  476,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  476,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  476,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  476,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  476,  476,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  476,  476,  478,  478,  478,  478,  478,
      476,  476,  476,  478,  478,  478,  478,  478,  476,  476,
      476,  478,  478,  478,  478,  476,  476,  476,  478,  478,
      478,  478,  476,  476,  476,  478,  478,  478,  476,  476,
      476,  478,  478,  478,  476,  476,  476,  478,  476,  478,
      476,  478,  476,  478,  476,    0,  476,  476,  476,  476,
      476,  476
    } ;

static yyconst flex_int16_t yy_nxt[742] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   21,   21,   21,   21,
       21,   22,   23,   24,   25,   26,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   28,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   28,
       28,   28,   52,   53,   54,   55,    6,   56,   57,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,   58,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,   59,   59,   59,   59,   59,   59,   59,

       59,    6,    6,    6,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,    6,    6,
        6,    6,   61,   62,   64,   67,   69,   71,   71,   71,
       71,   71,   71,   71,   87,   88,   90,   72,  475,   70,
       68,  474,   73,   65,  104,   75,  105,   82,  476,   91,
       92,   93,   63,   74,   75,  106,   76,   76,   76,   76,
       76,   76,   77,   78,   83,  473,   84,   85,   94,   97,
       95,  116,   78,  476,   96,   78,   79,  100,  117,   98,
      107,  101,   99,  113,   78,  118,  102,  122,  108,  125,

      109,  114,  103,  110,  120,  145,  472,  190,  121,  111,
      123,   79,  115,  129,  126,  191,  135,  127,  139,  136,
      130,  131,  140,  176,  141,  204,  471,  137,  142,  470,
      132,  133,  469,  134,  138,  212,  177,  143,  231,  232,
      205,   75,   75,  213,  146,   71,   71,   71,   71,   71,
       71,   71,  152,  152,  152,  152,  152,  152,  152,   78,
       78,  149,  217,  468,  218,  257,  258,  259,  153,  279,
      467,   78,   78,  149,  413,  414,  154,  280,  154,  466,
      153,  155,  155,  155,  155,  155,  155,  155,  184,  427,
      428,  185,  186,  465,  221,  187,  221,  188,  464,  222,

      222,  222,  222,  222,  222,  222,  152,  152,  152,  152,
      152,  152,  152,  284,  285,  286,  432,  433,  223,  463,
      223,  462,  153,  224,  224,  224,  224,  224,  224,  224,
      293,  294,  295,  461,  153,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  302,  303,  304,
      309,  310,  311,  313,  314,  315,  321,  322,  323,  406,
      407,  408,  460,  459,  458,  457,  456,  455,  454,  453,

      452,  451,  409,   80,   80,   89,   89,   89,  147,  147,
      147,  150,  150,  150,  150,  150,   77,   77,  156,  156,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  431,  430,  429,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  412,  411,  410,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,

      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  320,  319,  318,
      317,  316,  312,  308,  307,  306,  305,  301,  300,  299,
      298,  297,  296,  292,  291,  290,  289,  288,  287,  283,
      282,  281,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,

      237,  236,  235,  234,  233,  230,  229,  228,  227,  226,
      225,  151,  220,  219,  216,  215,  214,  211,  210,  209,
      208,  207,  206,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  189,  183,  182,  181,  180,
      179,  178,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      157,  151,  148,   73,  144,  128,  124,  119,  112,   86,
       81,   66,   60,  476,    5,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476
    } ;

static yyconst flex_int16_t yy_chk[742] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   10,   10,   11,   15,   17,   18,   18,   18,
       18,   18,   18,   18,   26,   26,   31,   19,  473,   17,
       15,  472,   19,   11,   36,   21,   36,   24,   76,   31,
       32,   32,   10,   19,   20,   36,   20,   20,   20,   20,
       20,   20,   20,   21,   24,  471,   24,   24,   33,   34,
       33,   40,   20,   76,   33,   21,   20,   35,   40,   34,
       37,   35,   34,   39,   20,   40,   35,   43,   37,   45,

       37,   39,   35,   37,   42,   53,  470,  119,   42,   37,
       43,   20,   39,   47,   45,  119,   48,   45,   49,   48,
       47,   47,   49,  109,   50,  132,  469,   48,   50,  468,
       47,   47,  466,   47,   48,  139,  109,   50,  166,  166,
      132,   77,   80,  139,   53,   71,   71,   71,   71,   71,
       71,   71,   75,   75,   75,   75,   75,   75,   75,   77,
       80,   71,  143,  463,  143,  192,  192,  192,   75,  212,
      461,   77,   80,   71,  397,  397,   78,  212,   78,  460,
       75,   78,   78,   78,   78,   78,   78,   78,  117,  421,
      421,  117,  117,  459,  149,  117,  149,  117,  458,  149,

      149,  149,  149,  149,  149,  149,  152,  152,  152,  152,
      152,  152,  152,  216,  216,  216,  425,  425,  153,  457,
      153,  456,  152,  153,  153,  153,  153,  153,  153,  153,
      228,  228,  228,  455,  152,  154,  154,  154,  154,  154,
      154,  154,  155,  155,  155,  155,  155,  155,  155,  221,
      221,  221,  221,  221,  221,  221,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  223,  223,  223,  223,  223,
      224,  224,  224,  224,  224,  224,  224,  236,  236,  236,
      244,  244,  244,  248,  248,  248,  254,  254,  254,  390,
      390,  390,  454,  453,  451,  450,  449,  448,  447,  446,

      445,  444,  390,  477,  477,  478,  478,  478,  479,  479,
      479,  480,  480,  480,  480,  480,  481,  481,  482,  482,
      443,  442,  441,  440,  439,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  424,  423,  422,
      420,  414,  413,  409,  408,  407,  406,  405,  403,  402,
      401,  398,  396,  394,  391,  389,  388,  387,  385,  384,
      383,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      366,  363,  360,  359,  358,  357,  356,  354,  352,  351,
      350,  349,  348,  346,  345,  343,  341,  340,  339,  338,
      337,  336,  335,  334,  332,  331,  330,  329,  328,  327,

      326,  325,  324,  320,  319,  316,  305,  301,  300,  299,
      298,  291,  290,  289,  288,  283,  282,  281,  280,  279,
      278,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  253,  252,  251,
      250,  249,  247,  243,  241,  240,  239,  235,  234,  233,
      232,  231,  230,  227,  225,  220,  219,  218,  217,  215,
      214,  213,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  177,  176,  175,  174,  173,  172,

      171,  170,  169,  168,  167,  165,  164,  163,  162,  161,
      160,  150,  148,  144,  142,  141,  140,  138,  137,  136,
      135,  134,  133,  131,  130,  129,  128,  127,  126,  125,
      124,  123,  122,  121,  120,  118,  115,  114,  113,  112,
      111,  110,  108,  107,  106,  105,  104,  103,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   88,
       84,   73,   63,   58,   51,   46,   44,   41,   38,   25,
       22,   14,    9,    5,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "glslang.l"
/*
//
//Copyright (C) 2002-2005  3Dlabs Inc. Ltd.
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions
//are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//    Neither the name of 3Dlabs Inc. Ltd. nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
//FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
//ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//POSSIBILITY OF SUCH DAMAGE.
//
*/
/* Based on
ANSI C grammar, Lex specification

In 1985, Jeff Lee published this Lex specification together with a Yacc 
grammar for the April 30, 1985 ANSI C draft.  Tom Stockfisch reposted 
both to net.sources in 1987; that original, as mentioned in the answer 
to question 17.25 of the comp.lang.c FAQ, can be ftp'ed from ftp.uu.net, 
file usenet/net.sources/ansi.c.grammar.Z. 

I intend to keep this version as close to the current C Standard grammar 
as possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/
#line 59 "glslang.l"
#include <stdio.h>
#include <stdlib.h>
#include "ParseHelper.h"
#include "glslang_tab.h"

/* windows only pragma */
#ifdef _MSC_VER
#pragma warning(disable : 4102)
#endif

int yy_input(char* buf, int max_size);
TSourceLoc yylineno;

#ifdef _WIN32
    extern int yyparse(TParseContext&);
    #define YY_DECL int yylex(YYSTYPE* pyylval,TParseContext& parseContext)    
#else
    extern int yyparse(void*);
    #define YY_DECL int yylex(YYSTYPE* pyylval,void* parseContextLocal)
    #define parseContext (*((TParseContext*)(parseContextLocal)))		
#endif
 
#define YY_INPUT(buf,result,max_size) (result = yy_input(buf, max_size))


#line 843 "Gen_glslang.cpp"

#define INITIAL 0
#define FIELDS 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 91 "glslang.l"

#line 995 "Gen_glslang.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 477 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 476 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 92 "glslang.l"
{ /* ?? carriage and/or line-feed? */ };
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 94 "glslang.l"
{  pyylval->lex.line = yylineno; return(ATTRIBUTE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 95 "glslang.l"
{  pyylval->lex.line = yylineno; return(CONST_QUAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "glslang.l"
{  pyylval->lex.line = yylineno; return(UNIFORM); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "glslang.l"
{  pyylval->lex.line = yylineno; return(VARYING); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 99 "glslang.l"
{  pyylval->lex.line = yylineno; return(BREAK); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 100 "glslang.l"
{  pyylval->lex.line = yylineno; return(CONTINUE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 101 "glslang.l"
{  pyylval->lex.line = yylineno; return(DO); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 102 "glslang.l"
{  pyylval->lex.line = yylineno; return(FOR); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "glslang.l"
{  pyylval->lex.line = yylineno; return(WHILE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 105 "glslang.l"
{  pyylval->lex.line = yylineno; return(IF); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 106 "glslang.l"
{  pyylval->lex.line = yylineno; return(ELSE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "glslang.l"
{  pyylval->lex.line = yylineno; return(IN_QUAL); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 109 "glslang.l"
{  pyylval->lex.line = yylineno; return(OUT_QUAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "glslang.l"
{  pyylval->lex.line = yylineno; return(INOUT_QUAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 112 "glslang.l"
{  pyylval->lex.line = yylineno; return(LOW_PRECISION); }    /* Added for ESSL Support*/
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 113 "glslang.l"
{  pyylval->lex.line = yylineno; return(MEDIUM_PRECISION); } /* Added for ESSL Support*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 114 "glslang.l"
{  pyylval->lex.line = yylineno; return(HIGH_PRECISION); }   /* Added for ESSL Support*/
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 115 "glslang.l"
{  pyylval->lex.line = yylineno; return(PRECISION); }         /* Added for ESSL Support*/
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 116 "glslang.l"
{  pyylval->lex.line = yylineno; return(INVARIANT); }         /* Added for ESSL Support*/
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 119 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(FLOAT_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(INT_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(VOID_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(BOOL_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "glslang.l"
{  pyylval->lex.line = yylineno; pyylval->lex.b = true;  return(BOOLCONSTANT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "glslang.l"
{  pyylval->lex.line = yylineno; pyylval->lex.b = false; return(BOOLCONSTANT); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "glslang.l"
{  pyylval->lex.line = yylineno; return(DISCARD); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "glslang.l"
{  pyylval->lex.line = yylineno; return(RETURN); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(MATRIX2); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(MATRIX3); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(MATRIX4); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 133 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (VEC2); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (VEC3); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (VEC4); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 136 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (IVEC2); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (IVEC3); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 138 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (IVEC4); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (BVEC2); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (BVEC3); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (BVEC4); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 143 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER1D; } // Removed for ESSL support
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 144 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER2D; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 145 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; parseContext.extensionErrorCheck(yylineno, "GL_OES_texture_3D"); return SAMPLER3D; } // Altered for ESSL support
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 146 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLERCUBE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 147 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER1DSHADOW; } // Removed for ESSL support
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 148 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER2DSHADOW; } // Removed for ESSL support
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 150 "glslang.l"
{ pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLERRECTARB; /* ARB_texture_rectangle */ }			// Removed for ESSL support
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 151 "glslang.l"
{ pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLERRECTSHADOWARB; /* ARB_texture_rectangle */ }	// Removed for ESSL support
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "glslang.l"
{  PaReservedWord(); return 0; }			// Added for ESSL support
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "glslang.l"
{  PaReservedWord(); return 0; }			// Added for ESSL support
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 155 "glslang.l"
{  pyylval->lex.line = yylineno; return(STRUCT); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 157 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 159 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 160 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 161 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 162 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 163 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 164 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 165 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 171 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 172 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 173 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 174 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 175 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 176 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 177 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 178 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 179 "glslang.l"
{  PaReservedWord(); return 0; }			// Added for ESSL support
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "glslang.l"
{  PaReservedWord(); return 0; }			// Added for ESSL support
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 189 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 190 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 192 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 193 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 194 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 195 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 196 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 197 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 198 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 199 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 200 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 203 "glslang.l"
{  PaReservedWord(); return 0; } // Added for ESSL support
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 204 "glslang.l"
{  PaReservedWord(); return 0; } // Added for ESSL support
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 205 "glslang.l"
{  PaReservedWord(); return 0; } // Added for ESSL support
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 206 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 208 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 209 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 211 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 212 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 214 "glslang.l"
{  
   pyylval->lex.line = yylineno; 
   pyylval->lex.string = NewPoolTString(yytext); 
   return PaIdentOrType(*pyylval->lex.string, parseContext, pyylval->lex.symbol); 
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 222 "glslang.l"
{ pyylval->lex.line = yylineno; parseContext.error(yylineno, "Invalid Octal number.", yytext, "", ""); parseContext.recover(); return 0;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 223 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 225 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 226 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 227 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 229 "glslang.l"
{  int ret = PaParseComment(pyylval->lex.line, parseContext); if (!ret) return ret; }   
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 231 "glslang.l"
{  pyylval->lex.line = yylineno; return(ADD_ASSIGN); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 232 "glslang.l"
{  pyylval->lex.line = yylineno; return(SUB_ASSIGN); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 233 "glslang.l"
{  pyylval->lex.line = yylineno; return(MUL_ASSIGN); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 234 "glslang.l"
{  pyylval->lex.line = yylineno; return(DIV_ASSIGN); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 235 "glslang.l"
{  pyylval->lex.line = yylineno; return(MOD_ASSIGN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 236 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_ASSIGN); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 237 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_ASSIGN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 238 "glslang.l"
{  pyylval->lex.line = yylineno; return(AND_ASSIGN); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 239 "glslang.l"
{  pyylval->lex.line = yylineno; return(XOR_ASSIGN); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 240 "glslang.l"
{  pyylval->lex.line = yylineno; return(OR_ASSIGN); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 242 "glslang.l"
{  pyylval->lex.line = yylineno; return(INC_OP); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 243 "glslang.l"
{  pyylval->lex.line = yylineno; return(DEC_OP); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 244 "glslang.l"
{  pyylval->lex.line = yylineno; return(AND_OP); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 245 "glslang.l"
{  pyylval->lex.line = yylineno; return(OR_OP); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 246 "glslang.l"
{  pyylval->lex.line = yylineno; return(XOR_OP); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 247 "glslang.l"
{  pyylval->lex.line = yylineno; return(LE_OP); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 248 "glslang.l"
{  pyylval->lex.line = yylineno; return(GE_OP); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 249 "glslang.l"
{  pyylval->lex.line = yylineno; return(EQ_OP); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 250 "glslang.l"
{  pyylval->lex.line = yylineno; return(NE_OP); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 251 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_OP); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 252 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_OP); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 253 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; return(SEMICOLON); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 254 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; return(LEFT_BRACE); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 255 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_BRACE); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 256 "glslang.l"
{  pyylval->lex.line = yylineno; if (parseContext.inTypeParen) parseContext.lexAfterType = false; return(COMMA); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 257 "glslang.l"
{  pyylval->lex.line = yylineno; return(COLON); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 258 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; return(EQUAL); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 259 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; parseContext.inTypeParen = true; return(LEFT_PAREN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 260 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.inTypeParen = false; return(RIGHT_PAREN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 261 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_BRACKET); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 262 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_BRACKET); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 263 "glslang.l"
{ BEGIN(FIELDS);  return(DOT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 264 "glslang.l"
{  pyylval->lex.line = yylineno; return(BANG); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 265 "glslang.l"
{  pyylval->lex.line = yylineno; return(DASH); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 266 "glslang.l"
{  pyylval->lex.line = yylineno; return(TILDE); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 267 "glslang.l"
{  pyylval->lex.line = yylineno; return(PLUS); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 268 "glslang.l"
{  pyylval->lex.line = yylineno; return(STAR); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 269 "glslang.l"
{  pyylval->lex.line = yylineno; return(SLASH); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 270 "glslang.l"
{  pyylval->lex.line = yylineno; return(PERCENT); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 271 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_ANGLE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 272 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_ANGLE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 273 "glslang.l"
{  pyylval->lex.line = yylineno; return(VERTICAL_BAR); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 274 "glslang.l"
{  pyylval->lex.line = yylineno; return(CARET); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 275 "glslang.l"
{  pyylval->lex.line = yylineno; return(AMPERSAND); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 276 "glslang.l"
{  pyylval->lex.line = yylineno; return(QUESTION); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 278 "glslang.l"
{ 
BEGIN(INITIAL);      
    pyylval->lex.line = yylineno;     
    pyylval->lex.string = NewPoolTString(yytext); 
    return FIELD_SELECTION; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 283 "glslang.l"
{}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 285 "glslang.l"
{  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FIELDS):
#line 286 "glslang.l"
{ (&parseContext)->AfterEOF = true; yy_delete_buffer(YY_CURRENT_BUFFER); yyterminate();}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 287 "glslang.l"
{ parseContext.infoSink.info << "FLEX: Unknown char " << yytext << "\n";
          return 0; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 290 "glslang.l"
ECHO;
	YY_BREAK
#line 1870 "Gen_glslang.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 477 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 477 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 476);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 290 "glslang.l"

//Including Pre-processor.
extern "C" {
  #include "./preprocessor/preprocess.h"
} 

//
// The YY_INPUT macro just calls this.  Maybe this could be just put into
// the macro directly.
//

int yy_input(char* buf, int max_size)
{
     char *char_token =NULL;
     int len;

    if ((len = yylex_CPP(buf, max_size)) == 0)
        return 0;
    if (len >= max_size) 
        YY_FATAL_ERROR( "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    buf[len] = ' ';
	return len+1;
}


//
// Parse an array of strings using yyparse.  We set up globals used by
// yywrap.
//
// Returns 0 for success, as per yyparse().
//
int PaParseStrings(char* argv[], int strLen[], int argc, TParseContext& parseContextLocal)
{
    int argv0len;
    
    ScanFromString(argv[0]); 
    
    //Storing the Current Compiler Parse context into the cpp structure.
	cpp->pC = (void*)&parseContextLocal;
	
	if (!argv || argc == 0)
        return 1;
    
    for (int i = 0; i < argc; ++i) {
        if (!argv[i]) {
            parseContextLocal.error(0, "Null shader source string", "", "");
            parseContextLocal.recover();
            return 1;
        }
    }
    
    if (!strLen) {
        argv0len = (int) strlen(argv[0]);
        strLen   = &argv0len;
    }
    yyrestart(0);
    (&parseContextLocal)->AfterEOF = false;
    cpp->PaWhichStr = 0;
    cpp->PaArgv     = argv;
    cpp->PaArgc     = argc;
    cpp->PaStrLen   = strLen;
    cpp->notAVersionToken = 0;
    yylineno   = 1;
   
    if (*cpp->PaStrLen >= 0) {    
        int ret;
        #ifdef _WIN32
            ret = yyparse(parseContextLocal);            
        #else
            ret = yyparse((void*)(&parseContextLocal));
        #endif
        if (cpp->CompileError == 1 || parseContextLocal.recoveredFromError || parseContextLocal.numErrors > 0)
             return 1;
        else
             return 0;
    }
    else
        return 0;
}

void yyerror(char *s) 
{
    if (((TParseContext *)cpp->pC)->AfterEOF) {
        if (cpp->tokensBeforeEOF == 1) {
            GlobalParseContext->error(yylineno, "syntax error", "pre-mature EOF", s, "");
            GlobalParseContext->recover();
        }
    } else {
        GlobalParseContext->error(yylineno, "syntax error", yytext, s, "");
        GlobalParseContext->recover();
    }            
}

void PaReservedWord()
{
    GlobalParseContext->error(yylineno, "Reserved word.", yytext, "", "");
    GlobalParseContext->recover();
}

int PaIdentOrType(TString& id, TParseContext& parseContextLocal, TSymbol*& symbol)
{
    symbol = parseContextLocal.symbolTable.find(id);
    if (parseContextLocal.lexAfterType == false && symbol && symbol->isVariable()) {
        TVariable* variable = static_cast<TVariable*>(symbol);
        if (variable->isUserType()) {
            parseContextLocal.lexAfterType = true;
            return TYPE_NAME;
        }
    }
    
    return IDENTIFIER;
}

int PaParseComment(int &lineno, TParseContext& parseContextLocal)
{
    int transitionFlag = 0;
    int nextChar;
    
    while (transitionFlag != 2) {
        nextChar = yyinput();
        if (nextChar == '\n')
             lineno++;
        switch (nextChar) {
        case '*' :
            transitionFlag = 1;
            break;
        case '/' :  /* if star is the previous character, then it is the end of comment */
            if (transitionFlag == 1) {
                return 1 ;
            }
            break;
        case EOF :
            /* Raise error message here */
            parseContextLocal.error(yylineno, "End of shader found before end of comment.", "", "", "");
            GlobalParseContext->recover();
            return YY_NULL; 
        default :  /* Any other character will be a part of the comment */
            transitionFlag = 0;
        }
    }
    return 1;
}

extern "C" {

void CPPDebugLogMsg(const char *msg)
{
    ((TParseContext *)cpp->pC)->infoSink.debug.message(EPrefixNone, msg);
}

void CPPWarningToInfoLog(const char *msg)
{
    ((TParseContext *)cpp->pC)->infoSink.info.message(EPrefixWarning, msg, yylineno); 
}

void CPPShInfoLogMsg(const char *msg)
{
    ((TParseContext *)cpp->pC)->error(yylineno,"", "",msg,"");
    GlobalParseContext->recover();
}

void CPPErrorToInfoLog(char *msg)
{
    ((TParseContext *)cpp->pC)->error(yylineno,"syntax error", "",msg,"");
    GlobalParseContext->recover();
}

void SetLineNumber(int line)
{
    yylineno &= ~SourceLocLineMask;
    yylineno |= line;
}

void SetStringNumber(int string)
{
    yylineno = (string << SourceLocStringShift) | (yylineno & SourceLocLineMask);
}

int GetStringNumber(void)
{
    return yylineno >> 16;
}

int GetLineNumber(void)
{
    return yylineno & SourceLocLineMask;
}

void IncLineNumber(void)
{
    if ((yylineno & SourceLocLineMask) <= SourceLocLineMask)
        ++yylineno;
}

void DecLineNumber(void)
{
    if ((yylineno & SourceLocLineMask) > 0)
        --yylineno;
}

void HandlePragma(const char **tokens, int numTokens)
{    
    if (!strcmp(tokens[0], "optimize")) {
        if (numTokens != 4) {
            CPPShInfoLogMsg("optimize pragma syntax is incorrect");
            return;
        }
        
        if (strcmp(tokens[1], "(")) {
            CPPShInfoLogMsg("\"(\" expected after 'optimize' keyword");
            return;
        }
            
        if (!strcmp(tokens[2], "on"))
            ((TParseContext *)cpp->pC)->contextPragma.optimize = true;
        else if (!strcmp(tokens[2], "off"))
            ((TParseContext *)cpp->pC)->contextPragma.optimize = false;
        else {
            CPPShInfoLogMsg("\"on\" or \"off\" expected after '(' for 'optimize' pragma");
            return;
        }
        
        if (strcmp(tokens[3], ")")) {
            CPPShInfoLogMsg("\")\" expected to end 'optimize' pragma");
            return;
        }
    } else if (!strcmp(tokens[0], "debug")) {
        if (numTokens != 4) {
            CPPShInfoLogMsg("debug pragma syntax is incorrect");
            return;
        }
        
        if (strcmp(tokens[1], "(")) {
            CPPShInfoLogMsg("\"(\" expected after 'debug' keyword");
            return;
        }
            
        if (!strcmp(tokens[2], "on"))
            ((TParseContext *)cpp->pC)->contextPragma.debug = true;
        else if (!strcmp(tokens[2], "off"))
            ((TParseContext *)cpp->pC)->contextPragma.debug = false;
        else {
            CPPShInfoLogMsg("\"on\" or \"off\" expected after '(' for 'debug' pragma");
            return;
        }
        
        if (strcmp(tokens[3], ")")) {
            CPPShInfoLogMsg("\")\" expected to end 'debug' pragma");
            return;
        }
    } else {

#ifdef PRAGMA_TABLE
        //
        // implementation specific pragma
        // use ((TParseContext *)cpp->pC)->contextPragma.pragmaTable to store the information about pragma
        // For now, just ignore the pragma that the implementation cannot recognize
        // An Example of one such implementation for a pragma that has a syntax like
        // #pragma pragmaname(pragmavalue)
        // This implementation stores the current pragmavalue against the pragma name in pragmaTable.
        //        
        if (numTokens == 4 && !strcmp(tokens[1], "(") && !strcmp(tokens[3], ")")) {              
            TPragmaTable& pragmaTable = ((TParseContext *)cpp->pC)->contextPragma.pragmaTable;
            TPragmaTable::iterator iter;
            iter = pragmaTable.find(TString(tokens[0]));
            if (iter != pragmaTable.end()) {
                iter->second = tokens[2];
            } else {
                pragmaTable[tokens[0]] = tokens[2];
            }        
        } else if (numTokens >= 2) {
            TPragmaTable& pragmaTable = ((TParseContext *)cpp->pC)->contextPragma.pragmaTable;
            TPragmaTable::iterator iter;
            iter = pragmaTable.find(TString(tokens[0]));
            if (iter != pragmaTable.end()) {
                iter->second = tokens[1];
            } else {
                pragmaTable[tokens[0]] = tokens[1];
            }
        }
#endif // PRAGMA_TABLE
    }
}

void StoreStr(char *string)
{
    TString strSrc;
    strSrc = TString(string);

    ((TParseContext *)cpp->pC)->HashErrMsg = ((TParseContext *)cpp->pC)->HashErrMsg + " " + strSrc;
}

const char* GetStrfromTStr(void)
{
    cpp->ErrMsg = (((TParseContext *)cpp->pC)->HashErrMsg).c_str();
    return cpp->ErrMsg;
}

void ResetTString(void)
{
    ((TParseContext *)cpp->pC)->HashErrMsg = "";
}

TBehavior GetBehavior(const char* behavior)
{
    if (!strcmp("require", behavior))
        return EBhRequire;
    else if (!strcmp("enable", behavior))
        return EBhEnable;
    else if (!strcmp("disable", behavior))
        return EBhDisable;
    else if (!strcmp("warn", behavior))
        return EBhWarn;
    else {
        CPPShInfoLogMsg((TString("behavior '") + behavior + "' is not supported").c_str());
        return EBhDisable;
    }        
}

void  updateExtensionBehavior(const char* extName, const char* behavior)
{
    TBehavior behaviorVal = GetBehavior(behavior);
    TMap<TString, TBehavior>:: iterator iter;
    TString msg;
    
    // special cased for all extension
    if (!strcmp(extName, "all")) {
        if (behaviorVal == EBhRequire || behaviorVal == EBhEnable) {
            CPPShInfoLogMsg("extension 'all' cannot have 'require' or 'enable' behavior");  
            return;
        } else {
            for (iter =  ((TParseContext *)cpp->pC)->extensionBehavior.begin(); iter != ((TParseContext *)cpp->pC)->extensionBehavior.end(); ++iter)
                iter->second = behaviorVal;
        }        
    } else {
        iter = ((TParseContext *)cpp->pC)->extensionBehavior.find(TString(extName));
        if (iter == ((TParseContext *)cpp->pC)->extensionBehavior.end()) {
            switch (behaviorVal) {
            case EBhRequire:
                CPPShInfoLogMsg((TString("extension '") + extName + "' is not supported").c_str());  
                break;
            case EBhEnable:
            case EBhWarn:
            case EBhDisable:
                msg = TString("extension '") + extName + "' is not supported";
                ((TParseContext *)cpp->pC)->infoSink.info.message(EPrefixWarning, msg.c_str(), yylineno); 
                break;
            }
            return;
        } else
            iter->second = behaviorVal;
    }
}
        
}  // extern "C"

void setInitialState()
{
    yy_start = 1;
}
